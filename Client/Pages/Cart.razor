@page "/cart"
@inject ICartService CartService

<PageTitle>Shopping Cart</PageTitle>
<h3>Shopping Cart</h3>

@if(cartProducts == null || cartProducts.Count == 0)
{
    <span>@message</span>
}
else
{
    <div>
        @foreach (var product in cartProducts)
        {
            <div class="container">
                <div class="image-wrapper">  
                    <img src="@product.ImageUrl" class="image"/>
                </div>
                <div class="name">
                    <h5>
                        <a href="/product/@product.ProductId">@product.ProductName</a>
                    </h5>
                    <br/>
                    <input type="number" 
                        value="@product.Quantity"
                        class="form-control input-quantity" 
                        min="1" 
                        @onchange="@((ChangeEventArgs e) => UpdateQuantity(e, product))" />
                    <button class="btn btn-outline-danger btn-sm" @onclick="@(() => RemoveProductFromCart(product.ProductId))">Remove</button>
                </div>
                <div class="cart-product-price">$@(product.Price * product.Quantity)</div>
            </div>
        }
        <div class="cart-product-total">
            Total (@cartProducts.Count): $@cartProducts.Sum(product => @product.Price * product.Quantity)
        </div>
    </div>
}

@code {
    List<CartProductResponse> cartProducts = null;
    string message = "Loading Cart...";

    protected override async Task OnInitializedAsync()
    {
        await LoadCart();
    }

    private async Task RemoveProductFromCart(int productId)
    {
        await CartService.RemoveProductFromCart(productId);
        await LoadCart();
    }

    private async Task LoadCart(){
        if ((await CartService.GetCartItems()).Count == 0)
        {
            message = "Your Cart Is Empty";
            cartProducts = new List<CartProductResponse>();
        }
        else
        {
            cartProducts = await CartService.GetCartProducts();
        }
    }

    private async Task UpdateQuantity(ChangeEventArgs e, CartProductResponse product)
    {
        product.Quantity = int.Parse(e.Value.ToString());
        if(product.Quantity < 1)
        {
            product.Quantity = 1;
        }

        await CartService.UpdateQuantity(product);
    }
}
